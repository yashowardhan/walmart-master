{"ast":null,"code":"var _jsxFileName = \"/Users/Hitesh/Desktop/DiveIn/dive-in/src/components/common/Tags.js\";\n// import React, { useEffect } from \"react\";\n// import { connect } from \"react-redux\";\n// import fetchTopics from \"../../store/actions/fetchTopics\";\n// function Tags(props) {\n//   useEffect(() => {\n//     // Update the document title using the browser API\n//     props.fetchTopics();\n//   }, []);\n//   console.log(props.topics, \"articles working cool\");\n//   const { topics } = props;\n//   return (\n//     <div>\n//       <h1>Select Tags</h1>\n//       {topics.map((topic) => {\n//         return topic.name;\n//       })}\n//     </div>\n//   );\n// }\n// const MapStateToProps = (state) => {\n//   return {\n//     topics: state.topics,\n//   };\n// };\n// // Setup Dispatch for our button events.\n// const MapDispatchToProps = (dispatch) => {\n//   return {\n//     fetchTopics: () => dispatch(fetchTopics),\n//   };\n// };\n// export default connect(MapStateToProps, MapDispatchToProps)(Tags);\nimport React, { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport fetchTopics from \"../../store/actions/fetchTopics\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport CommentIcon from \"@material-ui/icons/Comment\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: \"100%\",\n    maxWidth: 360,\n    backgroundColor: theme.palette.background.paper\n  }\n}));\n\nfunction Tags(props) {\n  const classes = useStyles();\n  const [checked, setChecked] = React.useState([0]);\n\n  const handleToggle = value => () => {\n    const currentIndex = checked.indexOf(value);\n    const newChecked = [...checked];\n\n    if (currentIndex === -1) {\n      newChecked.push(value);\n    } else {\n      newChecked.splice(currentIndex, 1);\n    }\n\n    setChecked(newChecked);\n  };\n\n  useEffect(() => {\n    // Update the document title using the browser API\n    props.fetchTopics();\n  }, []);\n  console.log(props.topics, \"articles working cool\");\n  const {\n    topics\n  } = props;\n  return /*#__PURE__*/React.createElement(List, {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 5\n    }\n  }, topics.map(topic => {\n    const labelId = `checkbox-list-label-${value}`;\n    return /*#__PURE__*/React.createElement(ListItem, {\n      key: topic.name,\n      role: undefined,\n      dense: true,\n      button: true,\n      onClick: handleToggle(topic),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(ListItemIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Checkbox, {\n      edge: \"start\",\n      checked: checked.indexOf(topic) !== -1,\n      tabIndex: -1,\n      disableRipple: true,\n      inputProps: {\n        \"aria-labelledby\": labelId\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(ListItemText, {\n      id: labelId,\n      primary: `Line item ${topic + 1}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 13\n      }\n    }));\n  }));\n}\n\nconst MapStateToProps = state => {\n  return {\n    topics: state.topics\n  };\n}; // Setup Dispatch for our button events.\n\n\nconst MapDispatchToProps = dispatch => {\n  return {\n    fetchTopics: () => dispatch(fetchTopics)\n  };\n};\n\nexport default connect(MapStateToProps, MapDispatchToProps)(Tags);","map":{"version":3,"sources":["/Users/Hitesh/Desktop/DiveIn/dive-in/src/components/common/Tags.js"],"names":["React","useEffect","connect","fetchTopics","makeStyles","List","ListItem","ListItemIcon","ListItemSecondaryAction","ListItemText","Checkbox","IconButton","CommentIcon","useStyles","theme","root","width","maxWidth","backgroundColor","palette","background","paper","Tags","props","classes","checked","setChecked","useState","handleToggle","value","currentIndex","indexOf","newChecked","push","splice","console","log","topics","map","topic","labelId","name","undefined","MapStateToProps","state","MapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["// import React, { useEffect } from \"react\";\n// import { connect } from \"react-redux\";\n// import fetchTopics from \"../../store/actions/fetchTopics\";\n\n// function Tags(props) {\n//   useEffect(() => {\n//     // Update the document title using the browser API\n//     props.fetchTopics();\n//   }, []);\n//   console.log(props.topics, \"articles working cool\");\n//   const { topics } = props;\n//   return (\n//     <div>\n//       <h1>Select Tags</h1>\n//       {topics.map((topic) => {\n//         return topic.name;\n//       })}\n//     </div>\n//   );\n// }\n// const MapStateToProps = (state) => {\n//   return {\n//     topics: state.topics,\n//   };\n// };\n\n// // Setup Dispatch for our button events.\n// const MapDispatchToProps = (dispatch) => {\n//   return {\n//     fetchTopics: () => dispatch(fetchTopics),\n//   };\n// };\n\n// export default connect(MapStateToProps, MapDispatchToProps)(Tags);\n\nimport React, { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport fetchTopics from \"../../store/actions/fetchTopics\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport CommentIcon from \"@material-ui/icons/Comment\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"100%\",\n    maxWidth: 360,\n    backgroundColor: theme.palette.background.paper,\n  },\n}));\n\nfunction Tags(props) {\n  const classes = useStyles();\n  const [checked, setChecked] = React.useState([0]);\n\n  const handleToggle = (value) => () => {\n    const currentIndex = checked.indexOf(value);\n    const newChecked = [...checked];\n\n    if (currentIndex === -1) {\n      newChecked.push(value);\n    } else {\n      newChecked.splice(currentIndex, 1);\n    }\n\n    setChecked(newChecked);\n  };\n  useEffect(() => {\n    // Update the document title using the browser API\n    props.fetchTopics();\n  }, []);\n  console.log(props.topics, \"articles working cool\");\n  const { topics } = props;\n  return (\n    <List className={classes.root}>\n      {topics.map((topic) => {\n        const labelId = `checkbox-list-label-${value}`;\n\n        return (\n          <ListItem\n            key={topic.name}\n            role={undefined}\n            dense\n            button\n            onClick={handleToggle(topic)}\n          >\n            <ListItemIcon>\n              <Checkbox\n                edge=\"start\"\n                checked={checked.indexOf(topic) !== -1}\n                tabIndex={-1}\n                disableRipple\n                inputProps={{ \"aria-labelledby\": labelId }}\n              />\n            </ListItemIcon>\n            <ListItemText id={labelId} primary={`Line item ${topic + 1}`} />\n            {/* <ListItemSecondaryAction>\n              <IconButton edge=\"end\" aria-label=\"comments\">\n                <CommentIcon />\n              </IconButton>\n            </ListItemSecondaryAction> */}\n          </ListItem>\n        );\n      })}\n    </List>\n  );\n}\n\nconst MapStateToProps = (state) => {\n  return {\n    topics: state.topics,\n  };\n};\n\n// Setup Dispatch for our button events.\nconst MapDispatchToProps = (dispatch) => {\n  return {\n    fetchTopics: () => dispatch(fetchTopics),\n  };\n};\n\nexport default connect(MapStateToProps, MapDispatchToProps)(Tags);\n"]},"metadata":{},"sourceType":"module"}